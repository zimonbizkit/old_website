<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Edu Simon</title>
    <description>Eduard Simón | simon.gallegos.edu@gmail.com
</description>
    <link>http://yourdomain.com/jekyll-slender-template/</link>
    <atom:link href="http://yourdomain.com/jekyll-slender-template/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>2017-12-28 23:21:54 +0100</pubDate>
    <lastBuildDate>2017-12-28 23:21:54 +0100</lastBuildDate>
    <generator>Jekyll v</generator>
    
      <item>
        <title>More learnings from the community at the CCC in Leipzig - Tor relays</title>
        <description>&lt;p&gt;It’s not my first time here,but since I’m a newcomer to what’s known as having a blog, I’m going to share some thoughts on my stay at the Chaos Communication Congress (CCC) that this year is being held in the city of Leipzig, Germany. As a disclaimer I’ll say that I’m quite the oppositte of a hacktivist/infosec guy, but since it’s the biggest hacker conference held in Europe, and I know some guys of that profile from an old good friend of mine, I thougt that that’s enough excuse to stroll around and go with them.&lt;/p&gt;

&lt;p&gt;I’m also neither an expert nor a rookie on alternative Internet protocols/routers, but as the Internet as we know it is becoming more centralized and easier to control by authorities, I thought it could be intereresting to assist to a conference held there, about maintaining an outer TOR relay, and its consequences for both the community and the “maintainer” of that relay. &lt;/p&gt;

&lt;p&gt;So, in first place, and to keep it short, Tor (which is an acronym of “The Onion Router”) is a  -describe tor with a few words here-. &lt;/p&gt;

</description>
        <pubDate>2017-12-28 15:31:49 +0100</pubDate>
        <link>http://yourdomain.com/jekyll-slender-template/community/tor/2017/12/28/my-stay-at-chaos-communication-congress-leipzig.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll-slender-template/community/tor/2017/12/28/my-stay-at-chaos-communication-congress-leipzig.html</guid>
        
        
        <category>community</category>
        
        <category>tor</category>
        
      </item>
    
      <item>
        <title>Dealing with ruby's various versions</title>
        <description>&lt;p&gt;While this blog was being adapted, I dealt with something that nowadays is a simple and very automated task: environment configuration. I just fell into the simplicity of putting everything in my base laptop, and thus, I struggled to have a “normal” environment for &lt;strong&gt;Ruby&lt;/strong&gt; running, as Jekyll is based on Ruby.&lt;/p&gt;

&lt;p&gt;So by the time I had something simple ready, I ran the jekyll &lt;code&gt;serve&lt;/code&gt; command so as to put the static site in a specific port, so as to browse locally, and the output was that:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;edu@edu &amp;gt; ~/Projects/website &amp;gt; jekyll serve 
/home/edu/.rvm/rubies/ruby-1.9.3-p374/lib/ruby/site_ruby/1.9.1/rubygems/core_ext/kernel_require.rb:55:in `require': cannot load such file -- jekyll (LoadError)
	from /home/edu/.rvm/rubies/ruby-1.9.3-p374/lib/ruby/site_ruby/1.9.1/rubygems/core_ext/kernel_require.rb:55:in `require'
	from /usr/bin/jekyll:20:in `&amp;lt;main&amp;gt;'&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def print_hi(name)
  puts &amp;quot;Hi, #{name}&amp;quot;
end
print_hi('Tom')
#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>2017-11-02 19:31:49 +0100</pubDate>
        <link>http://yourdomain.com/jekyll-slender-template/architecture/microservices/2017/11/02/dealing-with-various-envs-ruby.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll-slender-template/architecture/microservices/2017/11/02/dealing-with-various-envs-ruby.html</guid>
        
        
        <category>architecture</category>
        
        <category>microservices</category>
        
      </item>
    
      <item>
        <title>Food for thought: continuous integration learnings (I)</title>
        <description>&lt;p&gt;This will be the beginning of a series of posts to explain some theorical findings on software development, and as a reminder for them
I’m going to treat first a term which I knew, but I haven’t seen applied up to now: continuous integration.
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
When I came to the company which I’m working now, they explained to me their software testing strategy , and I was just amazed. There are a few reasons for that, but the most important, was that they had an idea of how and when to apply unit tests, and also they were using a way to do end-to-end testing and integration testing, with a tool called Behat , and Selenium. Compared to what I had in my previous job, where there was no strategy and even no testing at all, that seemed the utmost and final solution. They just did the work that, in my previous job, was conducted by some other colleague &lt;strong&gt;manually&lt;/strong&gt;, and that took a considerable amount of time, effort, and temper. 
&lt;br /&gt;
&lt;br /&gt;
Here, the automatic tests suite were run each time a feature was merged in a common branch (used for integration). That meant that &lt;em&gt;all&lt;/em&gt; the tests, were executed before the merge into production, which to me seemed pretty cool in first place. Nevertheless, I sensed some discussion from other colleagues regarding this, but I didn’t pay attention to it, as the way that integration was conducted was simply the best I knew.
&lt;br /&gt;
&lt;br /&gt;
Following the Continuous Integration discussion,it eventually seemed for the majority of the team that we were &lt;strong&gt;very far&lt;/strong&gt; to have such concept applied 100%. Yes, we were had an extensive list of tests and test types. Yes, testing software very &lt;em&gt;hard&lt;/em&gt;.But there were some indicators that we were not integrating software &lt;em&gt;well&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt; Some legacy unit tests were just using the database.&lt;/li&gt;
	&lt;li&gt; The tests that were supposed to cover integrations were mixed with the e2e ones.&lt;/li&gt;
	&lt;li&gt; The integration/e2e tests were taking a monstruous amount of time (more than an hour), making the test of features &lt;b&gt;slow&lt;/b&gt;.&lt;/li&gt;
	&lt;li&gt; There are too many integration/e2e tests, that might not need to be fired for some specific features.&lt;/li&gt;
	&lt;li&gt; When the common  branch had some failed/broken tests, &lt;b&gt;everyone had to wait&lt;/b&gt; until a fix was provided as the common branch was blocked in two ways: no one could upload to the &quot;stable&quot; branch, and no one could put a new feature on the common branch. That, of course, made the testing/delivery of new features &lt;b&gt;even slower&lt;/b&gt;. &lt;/li&gt;
	&lt;li&gt; Builds weren't automatically uploaded if the integration succeeded.&lt;/li&gt;
	&lt;li&gt; Stakeholders of the new feature aren't really aware of the actual status of any push of any feature being done.&lt;/li&gt;
	&lt;li&gt; A coverage test suite was being conducted, but it wasn't really taken into account.&lt;/li&gt; 
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
There are quite a bunch of things to fix, but the &lt;b&gt;tests&lt;/b&gt; seemed to be the common point. Therefore, I asked an experienced developer what tests had to do with our integration, as for me the way to integrate was correct. His answer was quite simple: &lt;b&gt;there were too many tests&lt;/b&gt;.That collided with my previous assumption of having as much tests as possible. He, then, introduced me a new concept on software testing: the &lt;b&gt;Test Pyramid&lt;/b&gt;.
&amp;lt;div class='tp-image'&amp;gt;
	&lt;img src=&quot;../../../../assets/posts/testpyramid.png&quot; /&gt;
&amp;lt;/div&amp;gt;&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://martinfowler.com/bliki/TestPyramid.html&quot;&gt;concept&lt;/a&gt; very well explained in &lt;a href=&quot;https://martinfowler.com/aboutMe.html&quot;&gt;Martin Fowlers blog&lt;/a&gt;, which in short states that in an Agile environment, a complex test suite should adhere to the following:&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		Unit tests are &lt;b&gt;fast&lt;/b&gt; (if they don't depend on database) and are &lt;b&gt;cost efficient&lt;/b&gt;. So they can proliferate in our testing suite and have as much we want for them. This involve testing &lt;i&gt;happy paths&lt;/i&gt; and &lt;i&gt;corner cases&lt;/i&gt; for our software unit. That also means that we need to test an unique software unit  once, and only once. 
	&lt;/li&gt;
	&lt;li&gt;
	Integration tests are rather fast. We can have a set of them, but they just need to test integrations and communications on our components. Thence, sometimes integration tests are also called component tests. It's better to not abuse them.
	&lt;/li&gt;
	&lt;li&gt;
		End to end tests are &lt;b&gt;slow&lt;/b&gt; as sometimes involve testing a set of contexts and pieces of our domain altogether. Sometimes, they could involve any automated test framework (such as &lt;a href=&quot;http://www.seleniumhq.org/&quot;&gt;Selenium&lt;/a&gt;) that makes the testing of a feature slow and faulty, by definition. Also they are &lt;b&gt;not cost efficient&lt;/b&gt;. So a must for this tests is to have just a few as possible, and to test very specific (crucial) user journeys.
	&lt;/li&gt;    
&lt;/ul&gt;
&lt;p&gt;Martin Fowler’s main entryline explaining this concept sums up quite well what’s to gain:&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;The test pyramid is a way of thinking about different kinds of automated tests should be used to create a balanced portfolio. Its essential point is that you should have many more low-level UnitTests than high level &quot;Broad Stack Tests&quot; running through a GUI.&lt;/blockquote&gt;

&lt;p&gt;So then, the discussion around what was our test strategy was eventually understood. Our integration was slow, buggy and sometimes unreliable as we were trapped in the following pitfalls:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;We had too much integration and e2e tests, and sometimes testing the same feature over and over again. As they are slow and not cost efficient, we waited too much for them to be completed.&lt;/li&gt;
	&lt;li&gt;
		Our unit tests relied on the database, which broke something should be a rule of thumb: unit tests should be stateless. In this case, they weren't.
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that being said, and after some discussion, the Test Pyramid concept made sense all across the team, and the policy to follow onwards will be around this princple when it comes to testing.
&lt;br /&gt;
The new approach for testing, that should improve a significant amount of our integration strategy, will involve:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Split integration tests in various suites. Try to choose which suite applies to be executed for which feature. If we succeed at this, we can try to execute suites in &lt;i&gt;parallel&lt;/i&gt; to gain time. I'd like to write some findings regarding this specific topic. &lt;/li&gt;
	&lt;li&gt;Identify useless tests of any kind, and remove them.&lt;/li&gt;
	&lt;li&gt;Make the tests relying on database to be stateless, or just remove them. &lt;/li&gt;
	&lt;li&gt;Discuss whether if it's necessary to execute all the test suite &lt;i&gt;for each&lt;/i&gt; feature or fix done to our software.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Part of discovering what was wrong in the test strategy is important to set the pace of CI. This landmarks need to be done on a daily basis, as the ‘win’ for this cannot be achieved overnight. Changing this is a very long term effort. 
&lt;br /&gt;
At the moment, these are the points we had covered. These are just points related to &lt;i&gt;testing software&lt;/i&gt; that will bring us closer to our main purpose, which is to approach to Continous Integration. Other topics will come and be addressed, which are unrelated to testing. That will be covered in the next post of this series. &lt;/p&gt;

</description>
        <pubDate>2017-10-16 20:31:49 +0200</pubDate>
        <link>http://yourdomain.com/jekyll-slender-template/ci/2017/10/16/fft-ci-learnings.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll-slender-template/ci/2017/10/16/fft-ci-learnings.html</guid>
        
        
        <category>ci</category>
        
      </item>
    
      <item>
        <title>Is splitting the monolith eventually worth it?</title>
        <description>&lt;p&gt;In any valuable  software team &lt;/p&gt;

&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div&gt;
  &lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;def print_hi(name)
  puts &amp;quot;Hi, #{name}&amp;quot;
end
print_hi('Tom')
#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>2017-09-01 20:31:49 +0200</pubDate>
        <link>http://yourdomain.com/jekyll-slender-template/architecture/microservices/2017/09/01/splitting-the-monolith-worth-it.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll-slender-template/architecture/microservices/2017/09/01/splitting-the-monolith-worth-it.html</guid>
        
        
        <category>architecture</category>
        
        <category>microservices</category>
        
      </item>
    
  </channel>
</rss>
