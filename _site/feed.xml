<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Edu Simon</title>
    <description>Eduard Simón | simon.gallegos.edu@gmail.com
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 05 Jan 2018 17:28:44 +0100</pubDate>
    <lastBuildDate>Fri, 05 Jan 2018 17:28:44 +0100</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>More learnings from the community at the CCC in Leipzig - Tor relays</title>
        <description>&lt;p&gt;It’s not my first time here,but since I’m a newcomer to what’s known as having a blog, I’m going to share some thoughts on my stay at the Chaos Communication Congress (CCC) that this year is being held in the city of Leipzig, Germany. As a disclaimer I’ll say that I’m quite the oppositte of a hacktivist/infosec guy, but since it’s the biggest hacker conference held in Europe, and I know some guys of that profile from an old good friend of mine, I thougt that that’s enough excuse to stroll around and go with them. I must say that if you are searching to get some knowledge of a specific technology, most of the things exposed here won’t be like that.&lt;/p&gt;

&lt;p&gt;As of writing, the experience of being here is being positive and uplifting. It’s a mixture of workgroups, conferences and assemblies related on ongoing topics such as internet anonimity, censorship, digital arts, activism,human rights, as may others. The people tha I’m meeting here makes me have an image of an inclusive community where any idea or opinion is being respected: this is a tremendous opportunty to see different opinions about the same topic. In short a huge chance to meet people that devote themselves to technology in a different way other than professionaly, and as my second year in this venue, I begin to see this as a source of inspiration.&lt;/p&gt;

&lt;p&gt;I’m also neither an expert nor a rookie on alternative Internet protocols/routers, but as the Internet as we know it is becoming less distributed and easier to control by authorities, I thought it could be intereresting to assist to a round table there, about maintaining an outer TOR relay, and its consequences for both the community and the “maintainer” of that relay.&lt;/p&gt;

&lt;p&gt;So, in first place, and to keep it short, Tor (which is an acronym of “The Onion Router”) is a  -describe tor with a few words here-.&lt;/p&gt;

&lt;p&gt;However, since the usage of Tor anonimyzes the information, it removes control of that from big corporations. These, don’t seem to like this, and push the authorities to remove and even punish the usage of it.&lt;/p&gt;

&lt;p&gt;Of course, as Tor is just a way of re-anonimyzing the web, there will be a set of people that will use it as a way to do fraudulent actions, and authorities see a chance there to demonize all the usage of this network. It’s quite saddening that there’s a conscious law enforcement keeping focus on the usage of these networks and its proper shutdown. As far as the internet was conceived, all the information should be accessed and accessible the same way , without prioritizing it depending on markets, political implications and lobbies of any kind. I understood from that workgroup that the community is aware of that and that a proper approach to authorities regarding the usage of Tor could help understand that the access to the information is free and equally.&lt;/p&gt;

</description>
        <pubDate>Thu, 28 Dec 2017 15:31:49 +0100</pubDate>
        <link>http://localhost:4000/community/tor/2017/12/28/my-stay-at-chaos-communication-congress-leipzig.html</link>
        <guid isPermaLink="true">http://localhost:4000/community/tor/2017/12/28/my-stay-at-chaos-communication-congress-leipzig.html</guid>
        
        
        <category>community</category>
        
        <category>tor</category>
        
      </item>
    
      <item>
        <title>Dealing with ruby's various versions</title>
        <description>&lt;p&gt;While this blog was being adapted, I dealt with something that nowadays is a simple and very automated task: environment configuration. I just fell into the simplicity of putting everything in my base laptop, and thus, I struggled to have a “normal” environment for &lt;strong&gt;Ruby&lt;/strong&gt; running, as Jekyll is based on Ruby.&lt;/p&gt;

&lt;p&gt;So by the time I had something simple ready, I ran the jekyll &lt;code class=&quot;highlighter-rouge&quot;&gt;serve&lt;/code&gt; command so as to put the static site in a specific port, so as to browse locally, and the output was that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; edu@edu &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/Projects/website &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; jekyll serve 
/home/edu/.rvm/rubies/ruby-1.9.3-p374/lib/ruby/site_ruby/1.9.1/rubygems/core_ext/kernel_require.rb:55:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;require&lt;span class=&quot;s1&quot;&gt;': cannot load such file -- jekyll (LoadError)
	from /home/edu/.rvm/rubies/ruby-1.9.3-p374/lib/ruby/site_ruby/1.9.1/rubygems/core_ext/kernel_require.rb:55:in `require'&lt;/span&gt;
	from /usr/bin/jekyll:20:in &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&amp;lt;main&amp;gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After that I assumed that I was screwed and that I was going to last days to know what’s been broken on my system. Before giving up I did a quick research of the output of that command, and seemed pretty common. I installed jekyll from the aptitude package manager, and as it’s also a gem on ruby, out of my desperation I tried to install ruby via its package manager:gem. So after executing &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll&lt;/code&gt;, the output was the following:&lt;/p&gt;

&lt;p&gt;So eventually seemed that my ruby version on my box was old enough to fail when trying to serve a static website. Since ruby was included by default in the box, and many services were dependant on ruby, I could not take the risk of just erasing ruby and installing the new version. I though to have a virtual environment to work in my blog, and I also discovered later that [this is a plausible soliution][vagrantjekyllbox] as in Vagrant Hub there’s a virtual machine for that.&lt;/p&gt;

&lt;p&gt;But before thinking that, I searched for a way that the fellow ruby developers could manage their environment easily, as for sur ther could have dealt with a problem similar as mine. And there, I found [RVM][rubyversionmanager]. That, is just the acronym of “Ruby Version Manager”, and it just does that very well. After following the steps they indicate on their website, I was able to see what was my ruby environment status (even when I tried to mess with ruby manually):&lt;/p&gt;

&lt;p&gt;After executing &lt;code class=&quot;highlighter-rouge&quot;&gt;rvm list known&lt;/code&gt; I was able to see which ruby version I needed to install. Again, installing a ruby version was really easy by executing &lt;code class=&quot;highlighter-rouge&quot;&gt;rvm install &amp;lt;ruby_version&amp;gt;&lt;/code&gt;. After that, by executing &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby list&lt;/code&gt; a list of available and used versions was displayed. To switch the version of ruby to the one I needed was as simple as &lt;code class=&quot;highlighter-rouge&quot;&gt;rvm use &amp;lt;ruby_version&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course, after that, &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt; was executed properly and I was able to check out the site that you are browsing now.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 02 Nov 2017 19:31:49 +0100</pubDate>
        <link>http://localhost:4000/architecture/microservices/2017/11/02/dealing-with-various-envs-ruby.html</link>
        <guid isPermaLink="true">http://localhost:4000/architecture/microservices/2017/11/02/dealing-with-various-envs-ruby.html</guid>
        
        
        <category>architecture</category>
        
        <category>microservices</category>
        
      </item>
    
      <item>
        <title>Food for thought: continuous integration learnings (I)</title>
        <description>&lt;p&gt;This will be the beginning of a series of posts to explain some theorical findings on software development, and as a reminder for them
I’m going to treat first a term which I knew, but I haven’t seen applied up to now: continuous integration.
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
When I came to the company which I’m working now, they explained to me their software testing strategy , and I was just amazed. There are a few reasons for that, but the most important, was that they had an idea of how and when to apply unit tests, and also they were using a way to do end-to-end testing and integration testing, with a tool called Behat , and Selenium. Compared to what I had in my previous job, where there was no strategy and even no testing at all, that seemed the utmost and final solution. They just did the work that, in my previous job, was conducted by some other colleague &lt;strong&gt;manually&lt;/strong&gt;, and that took a considerable amount of time, effort, and temper. 
&lt;br /&gt;
&lt;br /&gt;
Here, the automatic tests suite were run each time a feature was merged in a common branch (used for integration). That meant that &lt;em&gt;all&lt;/em&gt; the tests, were executed before the merge into production, which to me seemed pretty cool in first place. Nevertheless, I sensed some discussion from other colleagues regarding this, but I didn’t pay attention to it, as the way that integration was conducted was simply the best I knew.
&lt;br /&gt;
&lt;br /&gt;
Following the Continuous Integration discussion,it eventually seemed for the majority of the team that we were &lt;strong&gt;very far&lt;/strong&gt; to have such concept applied 100%. Yes, we were had an extensive list of tests and test types. Yes, testing software very &lt;em&gt;hard&lt;/em&gt;.But there were some indicators that we were not integrating software &lt;em&gt;well&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt; Some legacy unit tests were just using the database.&lt;/li&gt;
	&lt;li&gt; The tests that were supposed to cover integrations were mixed with the e2e ones.&lt;/li&gt;
	&lt;li&gt; The integration/e2e tests were taking a monstruous amount of time (more than an hour), making the test of features &lt;b&gt;slow&lt;/b&gt;.&lt;/li&gt;
	&lt;li&gt; There are too many integration/e2e tests, that might not need to be fired for some specific features.&lt;/li&gt;
	&lt;li&gt; When the common  branch had some failed/broken tests, &lt;b&gt;everyone had to wait&lt;/b&gt; until a fix was provided as the common branch was blocked in two ways: no one could upload to the &quot;stable&quot; branch, and no one could put a new feature on the common branch. That, of course, made the testing/delivery of new features &lt;b&gt;even slower&lt;/b&gt;. &lt;/li&gt;
	&lt;li&gt; Builds weren't automatically uploaded if the integration succeeded.&lt;/li&gt;
	&lt;li&gt; Stakeholders of the new feature aren't really aware of the actual status of any push of any feature being done.&lt;/li&gt;
	&lt;li&gt; A coverage test suite was being conducted, but it wasn't really taken into account.&lt;/li&gt; 
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
There are quite a bunch of things to fix, but the &lt;b&gt;tests&lt;/b&gt; seemed to be the common point. Therefore, I asked an experienced developer what tests had to do with our integration, as for me the way to integrate was correct. His answer was quite simple: &lt;b&gt;there were too many tests&lt;/b&gt;.That collided with my previous assumption of having as much tests as possible. He, then, introduced me a new concept on software testing: the &lt;b&gt;Test Pyramid&lt;/b&gt;.&lt;/p&gt;
&lt;div class=&quot;tp-image&quot;&gt;
	&lt;img src=&quot;../../../../assets/posts/testpyramid.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;A &lt;a href=&quot;https://martinfowler.com/bliki/TestPyramid.html&quot;&gt;concept&lt;/a&gt; very well explained in &lt;a href=&quot;https://martinfowler.com/aboutMe.html&quot;&gt;Martin Fowlers blog&lt;/a&gt;, which in short states that in an Agile environment, a complex test suite should adhere to the following:&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		Unit tests are &lt;b&gt;fast&lt;/b&gt; (if they don't depend on database) and are &lt;b&gt;cost efficient&lt;/b&gt;. So they can proliferate in our testing suite and have as much we want for them. This involve testing &lt;i&gt;happy paths&lt;/i&gt; and &lt;i&gt;corner cases&lt;/i&gt; for our software unit. That also means that we need to test an unique software unit  once, and only once. 
	&lt;/li&gt;
	&lt;li&gt;
	Integration tests are rather fast. We can have a set of them, but they just need to test integrations and communications on our components. Thence, sometimes integration tests are also called component tests. It's better to not abuse them.
	&lt;/li&gt;
	&lt;li&gt;
		End to end tests are &lt;b&gt;slow&lt;/b&gt; as sometimes involve testing a set of contexts and pieces of our domain altogether. Sometimes, they could involve any automated test framework (such as &lt;a href=&quot;http://www.seleniumhq.org/&quot;&gt;Selenium&lt;/a&gt;) that makes the testing of a feature slow and faulty, by definition. Also they are &lt;b&gt;not cost efficient&lt;/b&gt;. So a must for this tests is to have just a few as possible, and to test very specific (crucial) user journeys.
	&lt;/li&gt;    
&lt;/ul&gt;
&lt;p&gt;Martin Fowler’s main entryline explaining this concept sums up quite well what’s to gain:&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;The test pyramid is a way of thinking about different kinds of automated tests should be used to create a balanced portfolio. Its essential point is that you should have many more low-level UnitTests than high level &quot;Broad Stack Tests&quot; running through a GUI.&lt;/blockquote&gt;

&lt;p&gt;So then, the discussion around what was our test strategy was eventually understood. Our integration was slow, buggy and sometimes unreliable as we were trapped in the following pitfalls:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;We had too much integration and e2e tests, and sometimes testing the same feature over and over again. As they are slow and not cost efficient, we waited too much for them to be completed.&lt;/li&gt;
	&lt;li&gt;
		Our unit tests relied on the database, which broke something should be a rule of thumb: unit tests should be stateless. In this case, they weren't.
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that being said, and after some discussion, the Test Pyramid concept made sense all across the team, and the policy to follow onwards will be around this princple when it comes to testing.
&lt;br /&gt;
The new approach for testing, that should improve a significant amount of our integration strategy, will involve:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Split integration tests in various suites. Try to choose which suite applies to be executed for which feature. If we succeed at this, we can try to execute suites in &lt;i&gt;parallel&lt;/i&gt; to gain time. I'd like to write some findings regarding this specific topic. &lt;/li&gt;
	&lt;li&gt;Identify useless tests of any kind, and remove them.&lt;/li&gt;
	&lt;li&gt;Make the tests relying on database to be stateless, or just remove them. &lt;/li&gt;
	&lt;li&gt;Discuss whether if it's necessary to execute all the test suite &lt;i&gt;for each&lt;/i&gt; feature or fix done to our software.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Part of discovering what was wrong in the test strategy is important to set the pace of CI. This landmarks need to be done on a daily basis, as the ‘win’ for this cannot be achieved overnight. Changing this is a very long term effort. 
&lt;br /&gt;
At the moment, these are the points we had covered. These are just points related to &lt;i&gt;testing software&lt;/i&gt; that will bring us closer to our main purpose, which is to approach to Continous Integration. Other topics will come and be addressed, which are unrelated to testing. That will be covered in the next post of this series.&lt;/p&gt;

</description>
        <pubDate>Mon, 16 Oct 2017 20:31:49 +0200</pubDate>
        <link>http://localhost:4000/ci/2017/10/16/fft-ci-learnings.html</link>
        <guid isPermaLink="true">http://localhost:4000/ci/2017/10/16/fft-ci-learnings.html</guid>
        
        
        <category>ci</category>
        
      </item>
    
      <item>
        <title>Is splitting the monolith eventually worth it?</title>
        <description>&lt;p&gt;In any valuable  software team&lt;/p&gt;

&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 01 Sep 2017 20:31:49 +0200</pubDate>
        <link>http://localhost:4000/architecture/microservices/2017/09/01/splitting-the-monolith-worth-it.html</link>
        <guid isPermaLink="true">http://localhost:4000/architecture/microservices/2017/09/01/splitting-the-monolith-worth-it.html</guid>
        
        
        <category>architecture</category>
        
        <category>microservices</category>
        
      </item>
    
  </channel>
</rss>
